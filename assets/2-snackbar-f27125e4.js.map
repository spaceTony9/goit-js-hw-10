{"version":3,"file":"2-snackbar-f27125e4.js","sources":["../../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst submitBtn = document.querySelector('button');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst fulfilledBtn = document.querySelector('input[value=\"fulfilled\"]');\nconst rejectedBtn = document.querySelector('input[value=\"rejected\"]');\n\nsubmitBtn.addEventListener('click', e => {\n  e.preventDefault();\n  if (delayInput.value) { //validation that delay input must be filled \n    if (fulfilledBtn.checked || rejectedBtn.checked) { //validation on the buttons\n      const promise = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (fulfilledBtn.checked === true) { //checking which radio button was chosen \n            resolve(delayInput.value);\n          } else {\n            reject(delayInput.value);\n          }\n        }, delayInput.value);\n      });\n      promise\n        .then(value => {\n          popUpMessage();\n        })\n        .catch(error => {\n          popUpMessage();\n        });\n    } else { // in case none of buttons were checked\n      iziToast.show({\n        message: `⚠️ One of the buttons must be checked. Try again!`,\n        backgroundColor: 'orange',\n        messageColor: 'white',\n        messageSize: '20',\n        position: 'topRight',\n      });\n    }\n  } else { //in case delay field is empty\n    iziToast.show({\n      message: `⚠️ Delay field must be filled. Try again!`,\n      backgroundColor: 'orange',\n      messageColor: 'white',\n      messageSize: '20',\n      position: 'topRight',\n    });\n  }\n});\n\nfunction popUpMessage() { // function to adjuct pop up message for fulfillment and rejection\n  let message = null;\n  let backgroundColor = null;\n  if (fulfilledBtn.checked === true) {\n    message = `✅ Fulfilled promise in ${delayInput.value}ms`;\n    backgroundColor = '#3cb371';\n  } else {\n    message = `❌ Rejected promise in ${delayInput.value}ms`;\n    backgroundColor = '#cd5c5c';\n  }\n  iziToast.show({ // adjusted settings for pop up message for rejection or fulfillment\n    title: '',\n    messageColor: 'white',\n    message: message,\n    messageSize: '20',\n    backgroundColor: backgroundColor,\n    position: 'topRight',\n    resetOnHover: true,\n    timeout: 3000,\n  });\n}\n"],"names":["submitBtn","delayInput","fulfilledBtn","rejectedBtn","e","resolve","reject","value","popUpMessage","error","iziToast","message","backgroundColor"],"mappings":"yCAGA,MAAMA,EAAY,SAAS,cAAc,QAAQ,EAC3CC,EAAa,SAAS,cAAc,qBAAqB,EACzDC,EAAe,SAAS,cAAc,0BAA0B,EAChEC,EAAc,SAAS,cAAc,yBAAyB,EAEpEH,EAAU,iBAAiB,QAASI,GAAK,CACvCA,EAAE,eAAc,EACZH,EAAW,MACTC,EAAa,SAAWC,EAAY,QACtB,IAAI,QAAQ,CAACE,EAASC,IAAW,CAC/C,WAAW,IAAM,CACXJ,EAAa,UAAY,GAC3BG,EAAQJ,EAAW,KAAK,EAExBK,EAAOL,EAAW,KAAK,CAEnC,EAAWA,EAAW,KAAK,CAC3B,CAAO,EAEE,KAAKM,GAAS,CACbC,GACV,CAAS,EACA,MAAMC,GAAS,CACdD,GACV,CAAS,EAEHE,EAAS,KAAK,CACZ,QAAS,oDACT,gBAAiB,SACjB,aAAc,QACd,YAAa,KACb,SAAU,UAClB,CAAO,EAGHA,EAAS,KAAK,CACZ,QAAS,4CACT,gBAAiB,SACjB,aAAc,QACd,YAAa,KACb,SAAU,UAChB,CAAK,CAEL,CAAC,EAED,SAASF,GAAe,CACtB,IAAIG,EAAU,KACVC,EAAkB,KAClBV,EAAa,UAAY,IAC3BS,EAAU,0BAA0BV,EAAW,KAAK,KACpDW,EAAkB,YAElBD,EAAU,yBAAyBV,EAAW,KAAK,KACnDW,EAAkB,WAEpBF,EAAS,KAAK,CACZ,MAAO,GACP,aAAc,QACd,QAASC,EACT,YAAa,KACb,gBAAiBC,EACjB,SAAU,WACV,aAAc,GACd,QAAS,GACb,CAAG,CACH"}